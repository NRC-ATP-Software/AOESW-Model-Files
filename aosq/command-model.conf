subsystem = AOESW
component = aosq

description = "AOSQ Sequencer commands."
receive = [
  {
    name = initialize
    description = "Initialize the AO sequencer"
  }
  {
    name = configure
    description = "configure the AO sequencer"
  }
  {
    name = shutdown
    description = "stops all software in preparation for powering off of the servers."
  }
  {
    name = abort
    description = "Abort current action"
  }
  {
    name =simulationMode
    description = "Enables simulation mode"
    args=[
      {
	name = highOrder
	description = "Enable high order simulation mode where the interface with ESW is simulated"
	enum = [On, Off]
      }
    ]
  }
]

send = [
  {
    subsystem = AOESW
    component = rpg
    name = initialize
  }
  {
    subsystem = AOESW
    component = rpg
    name = shutdown
  }
  {
    subsystem = AOESW
    component = rpg
    name = configure
  }
  {
    subsystem = AOESW
    component = rpg
    name = abort
  }
  {
    subsystem = AOESW
    component = rpg
    name = simulationMode
  }
  {
    subsystem = AOESW
    component = rpg
    name = calibrateInteractionMatrix
  }
  {
    subsystem = AOESW
    component = rpg
    name = calibrateNcpa
  }
  {
    subsystem = AOESW
    component = rpg
    name = simulatedTurbulence
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareRTC
  }
  {
    subsystem = AOESW
    component = rpg
    name = followRTC
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsSa
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsAcq
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareSlodar
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsTtf
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsTruth
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareHighInteractionMatrix
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareHighReconstructor
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareLowMode
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareController
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareLowPassFilter
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareVibrationIdentification
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDither
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmZernike
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmInterp
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmClip
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareTelescopeOffload
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareNcpa
  }

  {
    subsystem = AOESW
    component = psfr
    name = initialize
  }
  {
    subsystem = AOESW
    component = psfr
    name = configure
  }
  {
    subsystem = AOESW
    component = psfr
    name = quicklook
  }
  {
    subsystem = AOESW
    component = psfr
    name = store
  }
  {
    subsystem = AOESW
    component = psfr
    name = getParameter
  }
  {
    subsystem = AOESW
    component = psfr
    name = setParameter
  }
  {
    subsystem = AOESW
    component = psfr
    name = shutdown
  }
  {
    subsystem = AOESW
    component = psfr
    name = abort
  }
  {
    subsystem = AOESW
    component = psfr
    name = simulationMode
  }
  
  {
    subsystem = NFIRAOS
    component = bs
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = bs
    name      = select
  }

  {
    subsystem = NFIRAOS
    component = ism
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = ism
    name      = select
  }

  {
    subsystem = NFIRAOS
    component = lgsTrombone
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = lgsTrombone
    name      = setElevation
  }
  {
    subsystem = NFIRAOS
    component = lgsTrombone
    name      = follow
  }
  {
    subsystem = NFIRAOS
    component = lgsTrombone
    name      = stop
  }

  {
    subsystem = NFIRAOS
    component = lgsWfs
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = lgsWfs
    name      = configure
  }
  {
    subsystem = NFIRAOS
    component = lgsWfs
    name      = mode
  }

  {
    subsystem = NFIRAOS
    component = ngsAdc
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = ngsAdc
    name      = follow

  }
  {
    subsystem = NFIRAOS
    component = ngsAdc
    name      = stop
  }

  {
    subsystem = NFIRAOS
    component = ngsFsm
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = ngsFsm
    name      = follow

  }
  {
    subsystem = NFIRAOS
    component = ngsFsm
    name      = stop
  }


  {
    subsystem = NFIRAOS
    component = ngsSsm
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = ngsSsm
    name      = follow

  }
  {
    subsystem = NFIRAOS
    component = ngsSsm
    name      = setDither

  }
  {
    subsystem = NFIRAOS
    component = ngsSsm
    name      = stop
  }
  {
    subsystem = NFIRAOS
    component = ngsSsm
    name      = setNssTarget
  }

  {
    subsystem = NFIRAOS
    component = nssLgs
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = nssLgs
    name      = deploy
  }
  {
    subsystem = NFIRAOS
    component = nssLgs
    name      = focus
  }
  {
    subsystem = NFIRAOS
    component = nssLgs
    name      = intensity
  }

  {
    subsystem = NFIRAOS
    component = nssNgs
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = nssNgs
    name      = deploy
  }
  {
    subsystem = NFIRAOS
    component = nssNgs
    name      = source
  }
  {
    subsystem = NFIRAOS
    component = nssNgs
    name      = fpm
  }

  {
    subsystem = NFIRAOS
    component = power
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = power
    name      = setDevice
  }

  {
    subsystem = NFIRAOS
    component = pwfs
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = pwfs
    name      = configure
  }
  {
    subsystem = NFIRAOS
    component = pwfs
    name      = mode
  }
  
  {
    subsystem = NFIRAOS
    component = tg
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = tg
    name      = follow
  }
  {
    subsystem = NFIRAOS
    component = tg
    name      = extract
  }

  {
    subsystem = NFIRAOS
    component = timing
    name      = datum
  }
  {
    subsystem = NFIRAOS
    component = timing
    name      = enableTrigger
  }
  {
    subsystem = NFIRAOS
    component = timing
    name      = disableTrigger
  }
  {
    subsystem = NFIRAOS
    component = timing
    name      = follow
  }
  {
    subsystem = NFIRAOS
    component = timing
    name      = stop
  }

  {
    subsystem = IRIS
    component = oiwfs-adc-assembly
    name      = FOLLOW_ADC
  }
  
  {
    subsystem = IRIS
    component = oiwfs-adc-assembly
    name      = MOVE_ADC
  }
  
  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = CALIBRATE_DETECTOR
  }
  
  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = CALIBRATE_SKY
  }
  
  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = DETECTOR_EXPOSURE
  }

  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = GET_ACQUISITION_TABLE
  }

  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = FOLLOW_DETECTOR
  }

  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = DITHER_MODE
  }

  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = SELECT_PROBES
  }
  
  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = MOVE_PROBES
  }
  
  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = FOLLOW_PROBES
  }
  
  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = OFFSET_PROBES
  }
  
  {
    subsystem = IRIS
    component = rotator-assembly
    name = MOVE_ROTATOR
  }
  
  {
    subsystem = IRIS
    component = rotator-assembly
    name = FOLLOW_ROTATOR
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = CALIBRATE_DETECTOR
  }
    
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = CALIBRATE_SKY
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_EXPOSURE
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = GET_ACQUISITION_TABLE
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_FOLLOW
  }
   {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_DITHER_MODE
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_OFFSET_POS
  }
]

