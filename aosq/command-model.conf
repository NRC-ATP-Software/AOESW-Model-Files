subsystem = AOESW
component = aosq

description = "AOSQ Sequencer commands."
receive = [
  {
    name = initialize
    description = "Initialize the AO sequencer"
  }
  {
    name = configure
    description = "configure the AO sequencer"
  }
  {
    name = shutdown
    description = "stops all software in preparation for powering off of the servers."
  }
  {
    name = abort
    description = "Abort current action"
  }
  {
    name =simulationMode
    description = "Enables simulation mode"
    args=[
      {
	name = highOrder
	description = "Enable high order simulation mode where the interface with ESW is simulated"
	enum = [On, Off]
      }
    ]
  }
]

send = [
  {
    subsystem = AOESW
    component = rpg
    name = initialize
  }
  {
    subsystem = AOESW
    component = rpg
    name = shutdown
  }
  {
    subsystem = AOESW
    component = rpg
    name = configure
  }
  {
    subsystem = AOESW
    component = rpg
    name = abort
  }
  {
    subsystem = AOESW
    component = rpg
    name = simulationMode
  }
  {
    subsystem = AOESW
    component = rpg
    name = calibrateInteractionMatrix
  }
  {
    subsystem = AOESW
    component = rpg
    name = calibrateNcpa
  }
  {
    subsystem = AOESW
    component = rpg
    name = simulatedTurbulence
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareRTC
  }
  {
    subsystem = AOESW
    component = rpg
    name = followRTC
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsSa
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsAcq
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareSlodar
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsTtf
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareWfsTruth
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareHighInteractionMatrix
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareHighReconstructor
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareLowMode
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareController
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareLowPassFilter
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareVibrationIdentification
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDither
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmZernike
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmInterp
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareDmClip
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareTelescopeOffload
  }
  {
    subsystem = AOESW
    component = rpg
    name = prepareNcpa
  }

  {
    subsystem = AOESW
    component = psfr
    name = initialize
  }
  {
    subsystem = AOESW
    component = psfr
    name = configure
  }
  {
    subsystem = AOESW
    component = psfr
    name = quicklook
  }
  {
    subsystem = AOESW
    component = psfr
    name = store
  }
  {
    subsystem = AOESW
    component = psfr
    name = getParameter
  }
  {
    subsystem = AOESW
    component = psfr
    name = setParameter
  }
  {
    subsystem = AOESW
    component = psfr
    name = shutdown
  }
  {
    subsystem = AOESW
    component = psfr
    name = abort
  }
  {
    subsystem = AOESW
    component = psfr
    name = simulationMode
  }
  

  // NFIRAOS at
  {
    subsystem  = NFIRAOS
    component  = at
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = DEPLOY_datum
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = DEPLOY_stop
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = DEPLOY_select
  }
  {
    subsystem  = NFIRAOS
    component  = at
    name       = SOURCE_onOff
  }

  // NFIRAOS bs
  {
    subsystem  = NFIRAOS
    component  = bs
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = bs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = bs
    name       = select
  }

  // NFIRAOS dm
  {
    subsystem  = NFIRAOS
    component  = dm
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = dm
    name       = park
  }

  // NFIRAOS ee
  {
    subsystem  = NFIRAOS
    component  = ee
    name       = init
  }
  {
    subsystem  = NFIRAOS
    component  = ee
    name       = debug
  }
  {
    subsystem  = NFIRAOS
    component  = ee
    name       = shutdown
  }

  // NFIRAOS encl
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = cooldown
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = warmup
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = allowAccess
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = quiet
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = standby
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = setPortGateState
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = setInputWindowShutterState
  }
  {
    subsystem  = NFIRAOS
    component  = encl
    name       = shutdown
  }

  // NFIRAOS ism
  {
    subsystem  = NFIRAOS
    component  = ism
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ism
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ism
    name       = select
  }

  // NFIRAOS lgsTrombone
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = sodiumLayer
  }
  {
    subsystem  = NFIRAOS
    component  = lgsTrombone
    name       = follow
  }

  // NFIRAOS lgsWfs
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = enableWfs
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = readSingleFrame
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = setPixelStream
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = setRtcDatagramSize
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = setRtcDestinations
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = setRtcTargets
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = configureExposurestartTriggeredExposures
  }
  {
    subsystem  = NFIRAOS
    component  = lgsWfs
    name       = stop
  }

  // NFIRAOS ngsAdc
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsAdc
    name       = follow
  }

  // NFIRAOS ngsFieldStop
  {
    subsystem  = NFIRAOS
    component  = ngsFieldStop
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFieldStop
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFieldStop
    name       = select
  }

  // NFIRAOS ngsFsm
  {
    subsystem  = NFIRAOS
    component  = ngsFsm
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFsm
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsFsm
    name       = follow
  }

  // NFIRAOS ngsSsm
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = setDither
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = setNssTarget
  }
  {
    subsystem  = NFIRAOS
    component  = ngsSsm
    name       = follow
  }

  // NFIRAOS nsen
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_datum
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_stop
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_select_sensor
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = BENCH_move_sensor
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = ACQ_config_exposure
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = ACQ_expose
  }
  {
    subsystem  = NFIRAOS
    component  = nsen
    name       = ACQ_abort
  }

  // NFIRAOS power
  {
    subsystem  = NFIRAOS
    component  = power
    name       = setOutlet
  }
  {
    subsystem  = NFIRAOS
    component  = power
    name       = setDevice
  }
  {
    subsystem  = NFIRAOS
    component  = power
    name       = park
  }
  {
    subsystem  = NFIRAOS
    component  = power
    name       = datum
  }

  // NFIRAOS pwfs
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = readSingleFrame
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setBinning
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setPixelStream
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setRtcDatagramSize
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setRtcDestinations
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = setRtcTargets
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = startContinuousExposures
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = startTriggeredExposures
  }
  {
    subsystem  = NFIRAOS
    component  = pwfs
    name       = stop
  }

  // NFIRAOS rtc
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = init
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = mode
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = simulate
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibLgsBackground
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModePixel
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModeGrad
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModeCmd
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = calibModeWc
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = pipelineActivate
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = pipelineDeactivate
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopOpen
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLgsFocus
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLgsTt
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = setLgsTtCntrl
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopTwfs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopHigh
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier0
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = acqTableSet
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier1
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier2
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLowTier3
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopLgsDither
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopPwfsDither
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = algoSetLgs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = algoSetPwfs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = algoSetOiwfsOdgw
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = offloadOiwfsPoa
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = offloadPwfsSsm
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = offloadTcs
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = pwfsTelDither
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = guideStarHandOff
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = loopParamReset
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = paramConfigSave
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = paramConfigSet
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = lgsfFsmZero
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = dmFlatten
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = ttsZero
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = rtsDelete
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = rtsQuery
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = rtsSave
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = test
  }
  {
    subsystem  = NFIRAOS
    component  = rtc
    name       = bufferDump
  }

  // NFIRAOS rtcRole
  {
    subsystem  = NFIRAOS
    component  = rtcRole
    name       = init
  }
  {
    subsystem  = NFIRAOS
    component  = rtcRole
    name       = select
  }
  {
    subsystem  = NFIRAOS
    component  = rtcRole
    name       = custom
  }
  {
    subsystem  = NFIRAOS
    component  = rtcRole
    name       = shutdown
  }

  // NFIRAOS ssLgs
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = deploy
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = rangeDistance
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = trajectory
  }
  {
    subsystem  = NFIRAOS
    component  = ssLgs
    name       = intensity
  }

  // NFIRAOS ssNgs
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = deploy
  }
  {
    subsystem  = NFIRAOS
    component  = ssNgs
    name       = source
  }

  // NFIRAOS timing
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = datum
  }
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = stop
  }
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = enableTriggers
  }
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = modifyTrigger
  }
  {
    subsystem  = NFIRAOS
    component  = timing
    name       = disableTrigger
  }

  // NFIRAOS tts
  {
    subsystem  = NFIRAOS
    component  = tts
    name       = datum
  }

  {
    subsystem = IRIS
    component = oiwfs-adc-assembly
    name      = FOLLOW_ADC
  }
  
  {
    subsystem = IRIS
    component = oiwfs-adc-assembly
    name      = MOVE_ADC
  }
  
  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = CALIBRATE_DETECTOR
  }
  
  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = CALIBRATE_SKY
  }
  
  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = DETECTOR_EXPOSURE
  }

  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = GET_ACQUISITION_TABLE
  }

  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = FOLLOW_DETECTOR
  }

  {
    subsystem = IRIS
    component = oiwfs-detector-assembly
    name      = DITHER_MODE
  }

  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = SELECT_PROBES
  }
  
  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = MOVE_PROBES
  }
  
  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = FOLLOW_PROBES
  }
  
  {
    subsystem = IRIS
    component = oiwfs-poa-assembly
    name      = OFFSET_PROBES
  }
  
  {
    subsystem = IRIS
    component = rotator-assembly
    name = MOVE_ROTATOR
  }
  
  {
    subsystem = IRIS
    component = rotator-assembly
    name = FOLLOW_ROTATOR
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = CALIBRATE_DETECTOR
  }
    
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = CALIBRATE_SKY
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_EXPOSURE
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = GET_ACQUISITION_TABLE
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_FOLLOW
  }
   {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_DITHER_MODE
  }
  {
    subsystem = IRIS
    component = imager-odgw-assembly
    name = ODGW_OFFSET_POS
  }
]

